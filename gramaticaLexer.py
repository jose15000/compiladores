# Generated from gramatica.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,189,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,14,1,14,1,14,3,14,134,8,14,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,3,16,148,8,16,1,17,1,17,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,5,
        24,167,8,24,10,24,12,24,170,9,24,1,25,1,25,1,25,1,25,5,25,176,8,
        25,10,25,12,25,179,9,25,1,25,1,25,1,26,4,26,184,8,26,11,26,12,26,
        185,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,6,2,0,43,43,45,45,2,0,
        42,42,47,47,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        2,0,10,10,13,13,3,0,9,10,13,13,32,32,197,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,
        55,1,0,0,0,3,63,1,0,0,0,5,71,1,0,0,0,7,79,1,0,0,0,9,85,1,0,0,0,11,
        89,1,0,0,0,13,95,1,0,0,0,15,98,1,0,0,0,17,103,1,0,0,0,19,107,1,0,
        0,0,21,113,1,0,0,0,23,118,1,0,0,0,25,124,1,0,0,0,27,126,1,0,0,0,
        29,133,1,0,0,0,31,135,1,0,0,0,33,147,1,0,0,0,35,149,1,0,0,0,37,151,
        1,0,0,0,39,153,1,0,0,0,41,155,1,0,0,0,43,157,1,0,0,0,45,159,1,0,
        0,0,47,161,1,0,0,0,49,164,1,0,0,0,51,171,1,0,0,0,53,183,1,0,0,0,
        55,56,5,80,0,0,56,57,5,82,0,0,57,58,5,79,0,0,58,59,5,71,0,0,59,60,
        5,82,0,0,60,61,5,65,0,0,61,62,5,77,0,0,62,2,1,0,0,0,63,64,5,73,0,
        0,64,65,5,78,0,0,65,66,5,84,0,0,66,67,5,69,0,0,67,68,5,71,0,0,68,
        69,5,69,0,0,69,70,5,82,0,0,70,4,1,0,0,0,71,72,5,66,0,0,72,73,5,79,
        0,0,73,74,5,79,0,0,74,75,5,76,0,0,75,76,5,69,0,0,76,77,5,65,0,0,
        77,78,5,78,0,0,78,6,1,0,0,0,79,80,5,66,0,0,80,81,5,69,0,0,81,82,
        5,71,0,0,82,83,5,73,0,0,83,84,5,78,0,0,84,8,1,0,0,0,85,86,5,69,0,
        0,86,87,5,78,0,0,87,88,5,68,0,0,88,10,1,0,0,0,89,90,5,87,0,0,90,
        91,5,72,0,0,91,92,5,73,0,0,92,93,5,76,0,0,93,94,5,69,0,0,94,12,1,
        0,0,0,95,96,5,68,0,0,96,97,5,79,0,0,97,14,1,0,0,0,98,99,5,82,0,0,
        99,100,5,69,0,0,100,101,5,65,0,0,101,102,5,68,0,0,102,16,1,0,0,0,
        103,104,5,86,0,0,104,105,5,65,0,0,105,106,5,82,0,0,106,18,1,0,0,
        0,107,108,5,70,0,0,108,109,5,65,0,0,109,110,5,76,0,0,110,111,5,83,
        0,0,111,112,5,69,0,0,112,20,1,0,0,0,113,114,5,84,0,0,114,115,5,82,
        0,0,115,116,5,85,0,0,116,117,5,69,0,0,117,22,1,0,0,0,118,119,5,87,
        0,0,119,120,5,82,0,0,120,121,5,73,0,0,121,122,5,84,0,0,122,123,5,
        69,0,0,123,24,1,0,0,0,124,125,7,0,0,0,125,26,1,0,0,0,126,127,7,1,
        0,0,127,28,1,0,0,0,128,129,5,79,0,0,129,134,5,82,0,0,130,131,5,65,
        0,0,131,132,5,78,0,0,132,134,5,68,0,0,133,128,1,0,0,0,133,130,1,
        0,0,0,134,30,1,0,0,0,135,136,5,126,0,0,136,32,1,0,0,0,137,148,5,
        60,0,0,138,139,5,60,0,0,139,148,5,61,0,0,140,148,5,62,0,0,141,142,
        5,62,0,0,142,148,5,61,0,0,143,144,5,61,0,0,144,148,5,61,0,0,145,
        146,5,60,0,0,146,148,5,62,0,0,147,137,1,0,0,0,147,138,1,0,0,0,147,
        140,1,0,0,0,147,141,1,0,0,0,147,143,1,0,0,0,147,145,1,0,0,0,148,
        34,1,0,0,0,149,150,5,59,0,0,150,36,1,0,0,0,151,152,5,46,0,0,152,
        38,1,0,0,0,153,154,5,58,0,0,154,40,1,0,0,0,155,156,5,44,0,0,156,
        42,1,0,0,0,157,158,5,40,0,0,158,44,1,0,0,0,159,160,5,41,0,0,160,
        46,1,0,0,0,161,162,5,58,0,0,162,163,5,61,0,0,163,48,1,0,0,0,164,
        168,7,2,0,0,165,167,7,3,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,
        166,1,0,0,0,168,169,1,0,0,0,169,50,1,0,0,0,170,168,1,0,0,0,171,172,
        5,47,0,0,172,173,5,47,0,0,173,177,1,0,0,0,174,176,8,4,0,0,175,174,
        1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,180,
        1,0,0,0,179,177,1,0,0,0,180,181,6,25,0,0,181,52,1,0,0,0,182,184,
        7,5,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,
        1,0,0,0,186,187,1,0,0,0,187,188,6,26,0,0,188,54,1,0,0,0,6,0,133,
        147,168,177,185,1,6,0,0
    ]

class gramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    INTEGER = 2
    BOOLEAN = 3
    BEGIN = 4
    END = 5
    WHILE = 6
    DO = 7
    READ = 8
    VAR = 9
    FALSE = 10
    TRUE = 11
    WRITE = 12
    OPAD = 13
    OPMULT = 14
    OPLOG = 15
    OPNEG = 16
    OPREL = 17
    PVIG = 18
    PONTO = 19
    DPONTOS = 20
    VIG = 21
    ABPAR = 22
    FPAR = 23
    ATRIB = 24
    ID = 25
    COMENTARIOS_LINHA = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'PROGRAM'", "'INTEGER'", "'BOOLEAN'", "'BEGIN'", "'END'", "'WHILE'", 
            "'DO'", "'READ'", "'VAR'", "'FALSE'", "'TRUE'", "'WRITE'", "'~'", 
            "';'", "'.'", "':'", "','", "'('", "')'", "':='" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "INTEGER", "BOOLEAN", "BEGIN", "END", "WHILE", "DO", 
            "READ", "VAR", "FALSE", "TRUE", "WRITE", "OPAD", "OPMULT", "OPLOG", 
            "OPNEG", "OPREL", "PVIG", "PONTO", "DPONTOS", "VIG", "ABPAR", 
            "FPAR", "ATRIB", "ID", "COMENTARIOS_LINHA", "WS" ]

    ruleNames = [ "PROGRAM", "INTEGER", "BOOLEAN", "BEGIN", "END", "WHILE", 
                  "DO", "READ", "VAR", "FALSE", "TRUE", "WRITE", "OPAD", 
                  "OPMULT", "OPLOG", "OPNEG", "OPREL", "PVIG", "PONTO", 
                  "DPONTOS", "VIG", "ABPAR", "FPAR", "ATRIB", "ID", "COMENTARIOS_LINHA", 
                  "WS" ]

    grammarFileName = "gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


