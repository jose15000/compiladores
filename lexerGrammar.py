# Generated from lexerGrammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,3,17,157,8,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,3,19,171,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,5,27,190,8,27,
        10,27,12,27,193,9,27,1,28,4,28,196,8,28,11,28,12,28,197,1,29,1,29,
        5,29,202,8,29,10,29,12,29,205,9,29,1,29,1,29,1,30,1,30,1,30,1,30,
        5,30,213,8,30,10,30,12,30,216,9,30,1,30,1,30,1,30,1,30,1,31,4,31,
        223,8,31,11,31,12,31,224,1,31,1,31,2,203,214,0,32,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,1,0,6,2,0,43,43,45,45,2,0,42,42,
        47,47,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,3,0,9,10,13,13,32,32,238,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,
        73,1,0,0,0,5,81,1,0,0,0,7,89,1,0,0,0,9,95,1,0,0,0,11,99,1,0,0,0,
        13,105,1,0,0,0,15,108,1,0,0,0,17,113,1,0,0,0,19,117,1,0,0,0,21,123,
        1,0,0,0,23,128,1,0,0,0,25,134,1,0,0,0,27,137,1,0,0,0,29,142,1,0,
        0,0,31,147,1,0,0,0,33,149,1,0,0,0,35,156,1,0,0,0,37,158,1,0,0,0,
        39,170,1,0,0,0,41,172,1,0,0,0,43,174,1,0,0,0,45,176,1,0,0,0,47,178,
        1,0,0,0,49,180,1,0,0,0,51,182,1,0,0,0,53,184,1,0,0,0,55,187,1,0,
        0,0,57,195,1,0,0,0,59,199,1,0,0,0,61,208,1,0,0,0,63,222,1,0,0,0,
        65,66,5,80,0,0,66,67,5,82,0,0,67,68,5,79,0,0,68,69,5,71,0,0,69,70,
        5,82,0,0,70,71,5,65,0,0,71,72,5,77,0,0,72,2,1,0,0,0,73,74,5,73,0,
        0,74,75,5,78,0,0,75,76,5,84,0,0,76,77,5,69,0,0,77,78,5,71,0,0,78,
        79,5,69,0,0,79,80,5,82,0,0,80,4,1,0,0,0,81,82,5,66,0,0,82,83,5,79,
        0,0,83,84,5,79,0,0,84,85,5,76,0,0,85,86,5,69,0,0,86,87,5,65,0,0,
        87,88,5,78,0,0,88,6,1,0,0,0,89,90,5,66,0,0,90,91,5,69,0,0,91,92,
        5,71,0,0,92,93,5,73,0,0,93,94,5,78,0,0,94,8,1,0,0,0,95,96,5,69,0,
        0,96,97,5,78,0,0,97,98,5,68,0,0,98,10,1,0,0,0,99,100,5,87,0,0,100,
        101,5,72,0,0,101,102,5,73,0,0,102,103,5,76,0,0,103,104,5,69,0,0,
        104,12,1,0,0,0,105,106,5,68,0,0,106,107,5,79,0,0,107,14,1,0,0,0,
        108,109,5,82,0,0,109,110,5,69,0,0,110,111,5,65,0,0,111,112,5,68,
        0,0,112,16,1,0,0,0,113,114,5,86,0,0,114,115,5,65,0,0,115,116,5,82,
        0,0,116,18,1,0,0,0,117,118,5,70,0,0,118,119,5,65,0,0,119,120,5,76,
        0,0,120,121,5,83,0,0,121,122,5,69,0,0,122,20,1,0,0,0,123,124,5,84,
        0,0,124,125,5,82,0,0,125,126,5,85,0,0,126,127,5,69,0,0,127,22,1,
        0,0,0,128,129,5,87,0,0,129,130,5,82,0,0,130,131,5,73,0,0,131,132,
        5,84,0,0,132,133,5,69,0,0,133,24,1,0,0,0,134,135,5,73,0,0,135,136,
        5,70,0,0,136,26,1,0,0,0,137,138,5,84,0,0,138,139,5,72,0,0,139,140,
        5,69,0,0,140,141,5,78,0,0,141,28,1,0,0,0,142,143,5,69,0,0,143,144,
        5,76,0,0,144,145,5,83,0,0,145,146,5,69,0,0,146,30,1,0,0,0,147,148,
        7,0,0,0,148,32,1,0,0,0,149,150,7,1,0,0,150,34,1,0,0,0,151,152,5,
        79,0,0,152,157,5,82,0,0,153,154,5,65,0,0,154,155,5,78,0,0,155,157,
        5,68,0,0,156,151,1,0,0,0,156,153,1,0,0,0,157,36,1,0,0,0,158,159,
        5,126,0,0,159,38,1,0,0,0,160,171,5,60,0,0,161,162,5,60,0,0,162,171,
        5,61,0,0,163,171,5,62,0,0,164,165,5,62,0,0,165,171,5,61,0,0,166,
        167,5,61,0,0,167,171,5,61,0,0,168,169,5,60,0,0,169,171,5,62,0,0,
        170,160,1,0,0,0,170,161,1,0,0,0,170,163,1,0,0,0,170,164,1,0,0,0,
        170,166,1,0,0,0,170,168,1,0,0,0,171,40,1,0,0,0,172,173,5,59,0,0,
        173,42,1,0,0,0,174,175,5,46,0,0,175,44,1,0,0,0,176,177,5,58,0,0,
        177,46,1,0,0,0,178,179,5,44,0,0,179,48,1,0,0,0,180,181,5,40,0,0,
        181,50,1,0,0,0,182,183,5,41,0,0,183,52,1,0,0,0,184,185,5,58,0,0,
        185,186,5,61,0,0,186,54,1,0,0,0,187,191,7,2,0,0,188,190,7,3,0,0,
        189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,
        192,56,1,0,0,0,193,191,1,0,0,0,194,196,7,4,0,0,195,194,1,0,0,0,196,
        197,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,58,1,0,0,0,199,203,
        5,34,0,0,200,202,9,0,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,204,
        1,0,0,0,203,201,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,
        5,34,0,0,207,60,1,0,0,0,208,209,5,47,0,0,209,210,5,47,0,0,210,214,
        1,0,0,0,211,213,9,0,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,215,
        1,0,0,0,214,212,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,
        5,10,0,0,218,219,1,0,0,0,219,220,6,30,0,0,220,62,1,0,0,0,221,223,
        7,5,0,0,222,221,1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,
        1,0,0,0,225,226,1,0,0,0,226,227,6,31,0,0,227,64,1,0,0,0,8,0,156,
        170,191,197,203,214,224,1,6,0,0
    ]

class lexerGrammar(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    INTEGER = 2
    BOOLEAN = 3
    BEGIN = 4
    END = 5
    WHILE = 6
    DO = 7
    READ = 8
    VAR = 9
    FALSE = 10
    TRUE = 11
    WRITE = 12
    IF = 13
    THEN = 14
    ELSE = 15
    OPAD = 16
    OPMULT = 17
    OPLOG = 18
    OPNEG = 19
    OPREL = 20
    PVIG = 21
    PONTO = 22
    DPONTOS = 23
    VIG = 24
    ABPAR = 25
    FPAR = 26
    ATRIB = 27
    ID = 28
    CTE = 29
    CADEIA = 30
    COMENTARIOS_LINHA = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'PROGRAM'", "'INTEGER'", "'BOOLEAN'", "'BEGIN'", "'END'", "'WHILE'", 
            "'DO'", "'READ'", "'VAR'", "'FALSE'", "'TRUE'", "'WRITE'", "'IF'", 
            "'THEN'", "'ELSE'", "'~'", "';'", "'.'", "':'", "','", "'('", 
            "')'", "':='" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "INTEGER", "BOOLEAN", "BEGIN", "END", "WHILE", "DO", 
            "READ", "VAR", "FALSE", "TRUE", "WRITE", "IF", "THEN", "ELSE", 
            "OPAD", "OPMULT", "OPLOG", "OPNEG", "OPREL", "PVIG", "PONTO", 
            "DPONTOS", "VIG", "ABPAR", "FPAR", "ATRIB", "ID", "CTE", "CADEIA", 
            "COMENTARIOS_LINHA", "WS" ]

    ruleNames = [ "PROGRAM", "INTEGER", "BOOLEAN", "BEGIN", "END", "WHILE", 
                  "DO", "READ", "VAR", "FALSE", "TRUE", "WRITE", "IF", "THEN", 
                  "ELSE", "OPAD", "OPMULT", "OPLOG", "OPNEG", "OPREL", "PVIG", 
                  "PONTO", "DPONTOS", "VIG", "ABPAR", "FPAR", "ATRIB", "ID", 
                  "CTE", "CADEIA", "COMENTARIOS_LINHA", "WS" ]

    grammarFileName = "lexerGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


