# Generated from lexerGrammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,243,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,166,8,18,1,19,
        1,19,1,19,1,19,3,19,172,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,3,20,184,8,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,5,28,203,8,28,
        10,28,12,28,206,9,28,1,29,4,29,209,8,29,11,29,12,29,210,1,29,1,29,
        1,30,1,30,1,30,1,30,5,30,219,8,30,10,30,12,30,222,9,30,1,30,1,30,
        1,31,1,31,1,31,1,31,5,31,230,8,31,10,31,12,31,233,9,31,1,31,1,31,
        1,32,4,32,238,8,32,11,32,12,32,239,1,32,1,32,0,0,33,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,1,0,8,2,0,43,43,45,45,
        2,0,42,42,47,47,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,
        3,0,10,10,13,13,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,255,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,75,1,0,0,0,5,83,1,
        0,0,0,7,91,1,0,0,0,9,98,1,0,0,0,11,104,1,0,0,0,13,108,1,0,0,0,15,
        114,1,0,0,0,17,117,1,0,0,0,19,122,1,0,0,0,21,126,1,0,0,0,23,132,
        1,0,0,0,25,137,1,0,0,0,27,143,1,0,0,0,29,146,1,0,0,0,31,151,1,0,
        0,0,33,156,1,0,0,0,35,158,1,0,0,0,37,165,1,0,0,0,39,171,1,0,0,0,
        41,183,1,0,0,0,43,185,1,0,0,0,45,187,1,0,0,0,47,189,1,0,0,0,49,191,
        1,0,0,0,51,193,1,0,0,0,53,195,1,0,0,0,55,197,1,0,0,0,57,200,1,0,
        0,0,59,208,1,0,0,0,61,214,1,0,0,0,63,225,1,0,0,0,65,237,1,0,0,0,
        67,68,5,80,0,0,68,69,5,82,0,0,69,70,5,79,0,0,70,71,5,71,0,0,71,72,
        5,82,0,0,72,73,5,65,0,0,73,74,5,77,0,0,74,2,1,0,0,0,75,76,5,73,0,
        0,76,77,5,78,0,0,77,78,5,84,0,0,78,79,5,69,0,0,79,80,5,71,0,0,80,
        81,5,69,0,0,81,82,5,82,0,0,82,4,1,0,0,0,83,84,5,66,0,0,84,85,5,79,
        0,0,85,86,5,79,0,0,86,87,5,76,0,0,87,88,5,69,0,0,88,89,5,65,0,0,
        89,90,5,78,0,0,90,6,1,0,0,0,91,92,5,83,0,0,92,93,5,84,0,0,93,94,
        5,82,0,0,94,95,5,73,0,0,95,96,5,78,0,0,96,97,5,71,0,0,97,8,1,0,0,
        0,98,99,5,66,0,0,99,100,5,69,0,0,100,101,5,71,0,0,101,102,5,73,0,
        0,102,103,5,78,0,0,103,10,1,0,0,0,104,105,5,69,0,0,105,106,5,78,
        0,0,106,107,5,68,0,0,107,12,1,0,0,0,108,109,5,87,0,0,109,110,5,72,
        0,0,110,111,5,73,0,0,111,112,5,76,0,0,112,113,5,69,0,0,113,14,1,
        0,0,0,114,115,5,68,0,0,115,116,5,79,0,0,116,16,1,0,0,0,117,118,5,
        82,0,0,118,119,5,69,0,0,119,120,5,65,0,0,120,121,5,68,0,0,121,18,
        1,0,0,0,122,123,5,86,0,0,123,124,5,65,0,0,124,125,5,82,0,0,125,20,
        1,0,0,0,126,127,5,70,0,0,127,128,5,65,0,0,128,129,5,76,0,0,129,130,
        5,83,0,0,130,131,5,69,0,0,131,22,1,0,0,0,132,133,5,84,0,0,133,134,
        5,82,0,0,134,135,5,85,0,0,135,136,5,69,0,0,136,24,1,0,0,0,137,138,
        5,87,0,0,138,139,5,82,0,0,139,140,5,73,0,0,140,141,5,84,0,0,141,
        142,5,69,0,0,142,26,1,0,0,0,143,144,5,73,0,0,144,145,5,70,0,0,145,
        28,1,0,0,0,146,147,5,84,0,0,147,148,5,72,0,0,148,149,5,69,0,0,149,
        150,5,78,0,0,150,30,1,0,0,0,151,152,5,69,0,0,152,153,5,76,0,0,153,
        154,5,83,0,0,154,155,5,69,0,0,155,32,1,0,0,0,156,157,7,0,0,0,157,
        34,1,0,0,0,158,159,7,1,0,0,159,36,1,0,0,0,160,161,5,79,0,0,161,166,
        5,82,0,0,162,163,5,65,0,0,163,164,5,78,0,0,164,166,5,68,0,0,165,
        160,1,0,0,0,165,162,1,0,0,0,166,38,1,0,0,0,167,172,5,126,0,0,168,
        169,5,78,0,0,169,170,5,79,0,0,170,172,5,84,0,0,171,167,1,0,0,0,171,
        168,1,0,0,0,172,40,1,0,0,0,173,184,5,60,0,0,174,175,5,60,0,0,175,
        184,5,61,0,0,176,184,5,62,0,0,177,178,5,62,0,0,178,184,5,61,0,0,
        179,180,5,61,0,0,180,184,5,61,0,0,181,182,5,60,0,0,182,184,5,62,
        0,0,183,173,1,0,0,0,183,174,1,0,0,0,183,176,1,0,0,0,183,177,1,0,
        0,0,183,179,1,0,0,0,183,181,1,0,0,0,184,42,1,0,0,0,185,186,5,59,
        0,0,186,44,1,0,0,0,187,188,5,46,0,0,188,46,1,0,0,0,189,190,5,58,
        0,0,190,48,1,0,0,0,191,192,5,44,0,0,192,50,1,0,0,0,193,194,5,40,
        0,0,194,52,1,0,0,0,195,196,5,41,0,0,196,54,1,0,0,0,197,198,5,58,
        0,0,198,199,5,61,0,0,199,56,1,0,0,0,200,204,7,2,0,0,201,203,7,3,
        0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,
        0,0,205,58,1,0,0,0,206,204,1,0,0,0,207,209,7,4,0,0,208,207,1,0,0,
        0,209,210,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,
        0,212,213,6,29,0,0,213,60,1,0,0,0,214,220,5,34,0,0,215,219,8,5,0,
        0,216,217,5,34,0,0,217,219,5,34,0,0,218,215,1,0,0,0,218,216,1,0,
        0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,223,1,0,
        0,0,222,220,1,0,0,0,223,224,5,34,0,0,224,62,1,0,0,0,225,226,5,47,
        0,0,226,227,5,47,0,0,227,231,1,0,0,0,228,230,8,6,0,0,229,228,1,0,
        0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,
        0,0,233,231,1,0,0,0,234,235,6,31,1,0,235,64,1,0,0,0,236,238,7,7,
        0,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,
        0,0,240,241,1,0,0,0,241,242,6,32,1,0,242,66,1,0,0,0,10,0,165,171,
        183,204,210,218,220,231,239,2,1,29,0,6,0,0
    ]

class lexerGrammar(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    INTEGER = 2
    BOOLEAN = 3
    STRING = 4
    BEGIN = 5
    END = 6
    WHILE = 7
    DO = 8
    READ = 9
    VAR = 10
    FALSE = 11
    TRUE = 12
    WRITE = 13
    IF = 14
    THEN = 15
    ELSE = 16
    OPAD = 17
    OPMULT = 18
    OPLOG = 19
    OPNEG = 20
    OPREL = 21
    PVIG = 22
    PONTO = 23
    DPONTOS = 24
    VIG = 25
    ABPAR = 26
    FPAR = 27
    ATRIB = 28
    IDENTIFIER = 29
    CTE = 30
    STRING_LITERAL = 31
    COMMENT = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'PROGRAM'", "'INTEGER'", "'BOOLEAN'", "'STRING'", "'BEGIN'", 
            "'END'", "'WHILE'", "'DO'", "'READ'", "'VAR'", "'FALSE'", "'TRUE'", 
            "'WRITE'", "'IF'", "'THEN'", "'ELSE'", "';'", "'.'", "':'", 
            "','", "'('", "')'", "':='" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "INTEGER", "BOOLEAN", "STRING", "BEGIN", "END", "WHILE", 
            "DO", "READ", "VAR", "FALSE", "TRUE", "WRITE", "IF", "THEN", 
            "ELSE", "OPAD", "OPMULT", "OPLOG", "OPNEG", "OPREL", "PVIG", 
            "PONTO", "DPONTOS", "VIG", "ABPAR", "FPAR", "ATRIB", "IDENTIFIER", 
            "CTE", "STRING_LITERAL", "COMMENT", "WS" ]

    ruleNames = [ "PROGRAM", "INTEGER", "BOOLEAN", "STRING", "BEGIN", "END", 
                  "WHILE", "DO", "READ", "VAR", "FALSE", "TRUE", "WRITE", 
                  "IF", "THEN", "ELSE", "OPAD", "OPMULT", "OPLOG", "OPNEG", 
                  "OPREL", "PVIG", "PONTO", "DPONTOS", "VIG", "ABPAR", "FPAR", 
                  "ATRIB", "IDENTIFIER", "CTE", "STRING_LITERAL", "COMMENT", 
                  "WS" ]

    grammarFileName = "lexerGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[29] = self.CTE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def CTE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            value = int(self.text)
            if value > 65535:
                raise Exception(f"Constante fora do intervalo de 2 bytes: {self.text}")

     


